<?php

/**
 * Author: lf
 * Blog: https://blog.feehi.com
 * Email: job@feehi.com
 * Created at: 2018-01-17 12:05
 */

namespace project\components\cdn;

// 引入依赖库
require dirname(dirname(dirname(__DIR__))) . '/vendor/obs/esdk-obs-php/vendor/autoload.php';
// 使用源码安装时引入SDK代码库
require dirname(dirname(dirname(__DIR__))) . '/vendor/obs/esdk-obs-php/obs-autoloader.php';

use Exception;
use Obs\ObsClient;
use feehi\cdn\TargetAbstract;
use feehi\cdn\TargetInterface;

class HuaweiTarget extends TargetAbstract implements TargetInterface
{

    public $key;

    public $secret;

    public $endpoint;

    public $bucket;

    /** @var  OssClient */
    public $client;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        if (empty($this->key)) throw new Exception("Huawei accessKey cannot be blank");
        if (empty($this->secret)) throw new Exception("Huawei accessSecret cannot be blank");
        if (empty($this->endpoint)) throw new Exception("Huawei endPoint cannot be blank");
        $this->client = new ObsClient([
            'key' => $this->key,
            'secret' => $this->secret,
            'endpoint' => $this->endpoint
        ]);
    }

    public function upload($localFile, $destFile)
    {
        $destFile = $this->nomarlizeDestFilePath($destFile);
        try {
            $result = $this->client->putObject([
                'Bucket' => $this->bucket,
                'Key' => $destFile,
                'SourceFile' => $localFile
            ]);
            return true;
        } catch (Exception $e) {
            $this->lastError = $e->getMessage();
            return false;
        }
    }

    public function multiUpload($localFile, $destFile)
    {
        $destFile = $this->nomarlizeDestFilePath($destFile);
        try {
            $result = $this->client->putObject([
                'Bucket' => $this->bucket,
                'Key' => $destFile,
                'SourceFile' => $localFile
            ]);
            return true;
        } catch (\Exception $e) {
            $this->lastError = $e->getMessage();
            return false;
        }
    }

    public function exists($destFile)
    {
        if (empty($destFile)) return false;
        $destFile = $this->nomarlizeDestFilePath($destFile);
        $resp = $this->client->listObjects([
            'Bucket' => $this->bucket
        ]);
        foreach ($resp['Contents'] as $index => $content) {
            if ($content['Key'] == $destFile) {
                return true;
            }
        }
        return false;
    }

    public function delete($destFile)
    {
        $destFile = $this->nomarlizeDestFilePath($destFile);
        try {
            $result = $this->client->deleteObject(
                [
                    'Bucket' => $this->bucket,
                    'Key' => $destFile
                ]
            );
            return true;
        } catch (Exception $e) {
            $this->lastError = $e->getMessage();
            return false;
        }
    }

    private function nomarlizeDestFilePath($destFile)
    {
        if (strpos($destFile, '/') === 0) $destFile = substr($destFile, 1);
        return $destFile;
    }
}
